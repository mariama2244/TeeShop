Creating the entity
---------------------------------------------------------------------------------------
PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> symfony console make:entity Product

 created: src/Entity/Product.php
 created: src/Repository/ProductRepository.php
 
 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > title

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 100

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > descript

 Field type (enter ? to see all types) [string]:
 > text

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > color

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 10

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > size

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 5

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > collection

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 10

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > photo

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > price

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 10

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > stock

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 5

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > createdAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > updateAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > deletedAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 > yes

 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 >


 
  Success! 
 

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> symfony console make:entity Command

 created: src/Entity/Command.php
 created: src/Repository/CommandRepository.php
 
 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > quantity

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 5

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Command.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > total

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 8

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Command.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > status

 Field type (enter ? to see all types) [string]:
 > 

 Field length [255]:
 > 30

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Command.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > createdAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Command.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > updatedAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Command.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > deletedAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 > yes

 updated: src/Entity/Command.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 >


 
  Success! 
 

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> symfony console make:user User     
 Do you want to store user data in the database (via Doctrine)? (yes/no) [yes]:
 >

 Enter a property name that will be the unique "display" name for the user (e.g. email, username, uuid) [email]:
 >

 Will this app need to hash/check user passwords? Choose No if passwords are not needed or will be checked/hashed by some other system (e.g. a single sign-on server).

 Does this app need to hash/check user passwords? (yes/no) [yes]:
 >

 created: src/Entity/User.php
 created: src/Repository/UserRepository.php
 updated: src/Entity/User.php
 updated: config/packages/security.yaml

 
  Success! 
 

 Next Steps:
   - Review your new App\Entity\User class.
   - Use make:entity to add more fields to your User entity and then run make:migration.       
   - Create a way to authenticate! See https://symfony.com/doc/current/security.html
PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> symfony console make:entity User


 Your entity already exists! So let's add some new fields!

 New property name (press <return> to stop adding fields):
 > firstname

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 100

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > lastname

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 100

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > gender

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 10

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > createdAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > updatedAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > deletedAt

 Field type (enter ? to see all types) [datetime_immutable]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 > yes

 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 >


 
  Success! 
 

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> 
-----------------------------------------------------------------------------------------
Editing and adding field to your entity
-------------------------------------------------------------------------------------------

PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> symfony console make:entity Command

 Your entity already exists! So let's add some new fields!

 New property name (press <return> to stop adding fields):
 > product

 Field type (enter ? to see all types) [string]:
 > relation

 What class should this entity be related to?:
 > Product

What type of relationship is this?
 ------------ ----------------------------------------------------------------------- 
  Type         Description
 ------------ -----------------------------------------------------------------------
  ManyToOne    Each Command relates to (has) one Product.
               Each Product can relate to (can have) many Command objects.

  OneToMany    Each Command can relate to (can have) many Product objects.
               Each Product relates to (has) one Command.

  ManyToMany   Each Command can relate to (can have) many Product objects.
               Each Product can also relate to (can also have) many Command objects.

  OneToOne     Each Command relates to (has) exactly one Product.
               Each Product also relates to (has) exactly one Command.
 ------------ -----------------------------------------------------------------------

 Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
 > OneToMany

 A new property will also be added to the Product class so that you can access and set the related Command object from it.

 New field name inside Product [command]:
 >

 Is the Product.command property allowed to be null (nullable)? (yes/no) [yes]:
 >

 updated: src/Entity/Command.php
 updated: src/Entity/Product.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > user

 Field type (enter ? to see all types) [string]:
 > relation

 What class should this entity be related to?:
 > User

What type of relationship is this?
  ManyToMany   Each Command can relate to (can have) many User objects.
               Each User can also relate to (can also have) many Command objects.

  OneToOne     Each Command relates to (has) exactly one User.
               Each User also relates to (has) exactly one Command.
 ------------ --------------------------------------------------------------------

 Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
 > ManyToOne

 Is the Command.user property allowed to be null (nullable)? (yes/no) [yes]:
 > no

 Do you want to add a new property to User so that you can access/update Command objects from it - e.g. $user->getCommands()? (yes/no) [yes]:
 > yes

 A new property will also be added to the User class so that you can access the related Command objects from it.

 New field name inside User [commands]:
 >

 Do you want to activate orphanRemoval on your relationship?
 A Command is "orphaned" when it is removed from its related User.
 e.g. $user->removeCommand($command)

 NOTE: If a Command may *change* from one User to another, answer "no".

 Do you want to automatically delete orphaned App\Entity\Command objects (orphanRemoval)? (yes/no) [no]:
 >

 updated: src/Entity/Command.php
 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields):      
 > 


 
  Success! 
 

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> 
--------------------------------------------------------------------------------
now to create form symfony console make:form 
------------------------------------------------------------------------

PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> symfony console make:form RegisterFormType

 The name of Entity or fully qualified model class name that the new form will be bound to (empty for none):
 > User

 created: src/Form/RegisterFormType.php

 
  Success! 
 

 Next: Add fields to your form and start using it.
 Find the documentation at https://symfony.com/doc/current/forms.html
PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> 
----------------------------------------------------------------------------------------

for auth
---------------------------------------------------------------------------------------
Next: Open your new controller class and add some pages!
PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> symfony console make:auth

 What style of authentication do you want? [Empty authenticator]:
  [0] Empty authenticator
  [1] Login form authenticator
 > 1

 The class name of the authenticator to create (e.g. AppCustomAuthenticator):
 > AppLoginAuthenticator 

 Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
 >

 Do you want to generate a '/logout' URL? (yes/no) [yes]:
 >

 created: src/Security/AppLoginAuthenticator.php
 updated: config/packages/security.yaml
 created: src/Controller/SecurityController.php
 created: templates/security/login.html.twig
 
  Success! 
 

 Next:
 - Customize your new authenticator.
 - Finish the redirect "TODO" in the App\Security\AppLoginAuthenticator::onAuthenticationSuccess() method. - Review & adapt the login template: templates/security/login.html.twig.
PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop> symfony console d:s:u -f


 [WARNING] Not passing the "--complete" option to "orm:schema-tool:update" is deprecated and   
           will not be supported when using doctrine/dbal 4                                    
                                                                                               

 Updating database schema...

     1 query was executed

                                                                                               
 [OK] Database schema updated successfully!                                                    
                                                                                               

PS C:\Users\User\OneDrive\Documents\Symfony\semaine_2\TeeShop>